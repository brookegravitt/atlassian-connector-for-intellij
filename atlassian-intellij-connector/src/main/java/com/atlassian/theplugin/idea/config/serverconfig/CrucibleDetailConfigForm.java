/**
 * Copyright (C) 2008 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.config.serverconfig;

import com.atlassian.theplugin.commons.cfg.CrucibleServerCfg;
import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;


public class CrucibleDetailConfigForm {

	private JPanel rootComponent;

	private JCheckBox cbFisheye;
	private final transient CrucibleServerFacade crucibleServerFacade;

	public CrucibleServerCfg getCrucibleServerCfg() {
		return crucibleServerCfg;
	}

	private CrucibleServerCfg crucibleServerCfg;

	public CrucibleDetailConfigForm(CrucibleServerFacade crucibleServerFacade) {
		this.crucibleServerFacade = crucibleServerFacade;

		$$$setupUI$$$();
	}

	public void setIsFishEyeInstance(boolean isFishEyeInstance) {
		cbFisheye.setSelected(isFishEyeInstance);
	}

	public void setData(@NotNull final CrucibleServerCfg serverCfg) {
		crucibleServerCfg = serverCfg;
		cbFisheye.setSelected(crucibleServerCfg.isFisheyeInstance());
	}

	public void saveData() {
		if (crucibleServerCfg == null) {
			return;
		}
		crucibleServerCfg.setFisheyeInstance(cbFisheye.isSelected());
	}

	public JComponent getRootComponent() {
		return rootComponent;
	}

	public void setVisible(boolean visible) {
		rootComponent.setVisible(visible);
	}

	private void createUIComponents() {
	}

	public boolean isFishEyeInstance() {
		return cbFisheye.isSelected();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootComponent = new JPanel();
		rootComponent.setLayout(new GridBagLayout());
		rootComponent.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Additional Configuration"));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0, 12, 12, 8);
		rootComponent.add(panel1, gbc);
		cbFisheye = new JCheckBox();
		cbFisheye.setText("Crucible server contains Fisheye instance");
		panel1.add(cbFisheye, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.VERTICAL;
		rootComponent.add(spacer1, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootComponent;
	}
}
