/**
 * Copyright (C) 2008 Atlassian
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.config.serverconfig;

import com.atlassian.theplugin.commons.ServerType;
import com.atlassian.theplugin.commons.configuration.PluginConfiguration;
import com.atlassian.theplugin.configuration.JiraConfigurationBean;
import com.atlassian.theplugin.configuration.PluginConfigurationBean;
import com.atlassian.theplugin.idea.config.ContentPanel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

/**
 * Created by IntelliJ IDEA.
 * User: Jacek
 * Date: 2008-03-10
 * Time: 12:15:37
 * To change this template use File | Settings | File Templates.
 */
public class JiraGeneralForm extends JComponent implements ContentPanel {
	private JPanel rootComponent;
	private SpinnerModel model;
	private JSpinner pollTimeSpinner;
	private JCheckBox cbIconDescription;

	private transient PluginConfigurationBean globalPluginConfiguration;

	private transient JiraConfigurationBean jiraConfiguration;

	private transient PluginConfiguration localPluginConfigurationCopy;
	private static JiraGeneralForm instance;

	private JiraGeneralForm(PluginConfigurationBean globalPluginConfiguration) {

		this.globalPluginConfiguration = globalPluginConfiguration;

		$$$setupUI$$$();
		model = new SpinnerNumberModel(1, 1, 1000, 1);
		pollTimeSpinner.setModel(model);

		this.setLayout(new BorderLayout());
		add(rootComponent, BorderLayout.WEST);
	}


	public static JiraGeneralForm getInstance(PluginConfigurationBean globalPluginConfiguration) {
		if (instance == null) {
			instance = new JiraGeneralForm(globalPluginConfiguration);
		}
		return instance;
	}

	public boolean isModified() {
		return (Integer) model.getValue() != jiraConfiguration.getPollTime() || cbIconDescription.isSelected() != jiraConfiguration.isDisplayIconDescription();
	}

	public String getTitle() {
		return "JIRA";
	}

	public void getData() {

		((JiraConfigurationBean) getLocalPluginConfigurationCopy()
				.getProductServers(ServerType.JIRA_SERVER))
				.setPollTime((Integer) model.getValue());


		((JiraConfigurationBean) globalPluginConfiguration
				.getProductServers(ServerType.JIRA_SERVER))
				.setPollTime((Integer) model.getValue());

		((JiraConfigurationBean) getLocalPluginConfigurationCopy()
				.getProductServers(ServerType.JIRA_SERVER))
				.setDisplayIconDescription(cbIconDescription.isSelected());

		((JiraConfigurationBean) globalPluginConfiguration
				.getProductServers(ServerType.JIRA_SERVER))
				.setDisplayIconDescription(cbIconDescription.isSelected());

	}

	public void setData(PluginConfiguration config) {

		localPluginConfigurationCopy = config;

		jiraConfiguration =
				(JiraConfigurationBean) localPluginConfigurationCopy.getProductServers(ServerType.JIRA_SERVER);

		model.setValue(jiraConfiguration.getPollTime());

		cbIconDescription.setSelected(jiraConfiguration.isDisplayIconDescription());

	}

	private PluginConfiguration getLocalPluginConfigurationCopy() {
		return localPluginConfigurationCopy;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		rootComponent = new JPanel();
		rootComponent.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
		rootComponent.setOpaque(true);
		rootComponent.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(12, 12, 12, 12), null));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		rootComponent.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		pollTimeSpinner = new JSpinner();
		pollTimeSpinner.setEnabled(false);
		pollTimeSpinner.setToolTipText("Polling is not used for JIRA currently");
		panel1.add(pollTimeSpinner, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Polling Time [minutes]:");
		label1.setToolTipText("Polling is not used for JIRA currently");
		rootComponent.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		rootComponent.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		rootComponent.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		cbIconDescription = new JCheckBox();
		cbIconDescription.setHorizontalTextPosition(11);
		cbIconDescription.setText("Display icon description");
		cbIconDescription.setToolTipText("Refresh in tool window required");
		rootComponent.add(cbIconDescription, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return rootComponent;
	}
}
