package com.atlassian.theplugin.idea.crucible.filters;

import com.atlassian.theplugin.commons.crucible.api.model.PredefinedFilter;
import com.atlassian.theplugin.commons.crucible.api.model.CustomFilterBean;
import com.atlassian.theplugin.idea.crucible.CrucibleTableToolWindowPanel;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

public class SelectFilters extends DialogWrapper {
	private JPanel contentPane;

	private JCheckBox toReviewCheckBox;
	private JCheckBox requireApprovalCheckBox;
	private JCheckBox toSummarizeCheckBox;
	private JCheckBox outForReviewCheckBox;
	private JCheckBox draftsCheckBox;
	private JCheckBox openCheckBox;
	private JCheckBox closedCheckBox;
	private JCheckBox abandonedCheckBox;
	private JCheckBox customFilterCheckBox;

	private CrucibleTableToolWindowPanel cruciblePanel;

	private Map<PredefinedFilter, Boolean> filters =
			new HashMap<PredefinedFilter, Boolean>(PredefinedFilter.values().length, 1);
	private Map<PredefinedFilter, JCheckBox> checkboxes =
			new HashMap<PredefinedFilter, JCheckBox>(PredefinedFilter.values().length, 1);

	public SelectFilters(CrucibleTableToolWindowPanel cruciblePanel) {
		super(cruciblePanel, false);
		this.cruciblePanel = cruciblePanel;
		setTitle("Select Filters");
		setModal(true);
		init();
		pack();

		initCheckboxes();
	}

	private void initCheckboxes() {
		// tie checkbox with PredefinedFilter values
		checkboxes.put(PredefinedFilter.ToReview, toReviewCheckBox);
		checkboxes.put(PredefinedFilter.RequireMyApproval, requireApprovalCheckBox);
		checkboxes.put(PredefinedFilter.ToSummarize, toSummarizeCheckBox);
		checkboxes.put(PredefinedFilter.OutForReview, outForReviewCheckBox);
		checkboxes.put(PredefinedFilter.Drafts, draftsCheckBox);
		checkboxes.put(PredefinedFilter.Open, openCheckBox);
		checkboxes.put(PredefinedFilter.Closed, closedCheckBox);
		checkboxes.put(PredefinedFilter.Abandoned, abandonedCheckBox);

		// set custom filter name
		customFilterCheckBox.setText(
				customFilterCheckBox.getText() + ": " + cruciblePanel.getCustomFilter().getTitle());

		addCheckboxListeners();
		recoverCheckboxStates();
	}

	/**
	 * Sets checkboxes state according to configuration saved values
	 */
	private void recoverCheckboxStates() {
		Boolean[] cfgFilters =
				cruciblePanel.getProjectCfg().getCrucibleConfiguration().getCrucibleFilters().getPredefinedFilters();

		// set checkbox state for predefined filters
		for (final Map.Entry<PredefinedFilter, JCheckBox> entry : checkboxes.entrySet()) {
			if (cfgFilters[entry.getKey().ordinal()] == null) {
				cfgFilters[entry.getKey().ordinal()] = false;
			}
			entry.getValue().setSelected(cfgFilters[entry.getKey().ordinal()]);
			filters.put(entry.getKey(), entry.getValue().isSelected());
		}

		CustomFilterBean customFilter =
				cruciblePanel.getProjectCfg().getCrucibleConfiguration().getCrucibleFilters().getManualFilter();

		// set checbox state for custom filter
		if (customFilter != null) {
			customFilterCheckBox.setSelected(customFilter.isEnabled());
		}
	}

	private void addCheckboxListeners() {
		for (final Map.Entry<PredefinedFilter, JCheckBox> entry : checkboxes.entrySet()) {
			entry.getValue().addActionListener(new ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					filters.put(entry.getKey(), entry.getValue().isSelected());
				}
			});
		}

		customFilterCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent e) {

			}
		});
	}

	public Map<PredefinedFilter, Boolean> getFilters() {
		return filters;
	}

	public boolean getCustomFilterState() {
		return customFilterCheckBox.isSelected();
	}

	@Nullable
	protected JComponent createCenterPanel() {
		return contentPane;
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(6, 5, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		toReviewCheckBox = new JCheckBox();
		toReviewCheckBox.setText("To Review");
		panel1.add(toReviewCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel1.add(spacer1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
				GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		requireApprovalCheckBox = new JCheckBox();
		requireApprovalCheckBox.setText("Require Approval");
		panel1.add(requireApprovalCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		outForReviewCheckBox = new JCheckBox();
		outForReviewCheckBox.setText("Out for Review");
		panel1.add(outForReviewCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		draftsCheckBox = new JCheckBox();
		draftsCheckBox.setText("Drafts");
		panel1.add(draftsCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		openCheckBox = new JCheckBox();
		openCheckBox.setText("Open");
		panel1.add(openCheckBox, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		closedCheckBox = new JCheckBox();
		closedCheckBox.setText("Closed");
		panel1.add(closedCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		abandonedCheckBox = new JCheckBox();
		abandonedCheckBox.setText("Abandoned");
		panel1.add(abandonedCheckBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final JSeparator separator1 = new JSeparator();
		panel1.add(separator1, new GridConstraints(3, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		customFilterCheckBox = new JCheckBox();
		customFilterCheckBox.setText("Custom Filter");
		panel1.add(customFilterCheckBox, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		toSummarizeCheckBox = new JCheckBox();
		toSummarizeCheckBox.setText("To Summarize");
		panel1.add(toSummarizeCheckBox, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel1.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}
