/**
 * Copyright (C) 2008 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.crucible;

import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
import com.atlassian.theplugin.commons.crucible.CrucibleServerFacadeImpl;
import com.atlassian.theplugin.commons.crucible.ValueNotYetInitialized;
import com.atlassian.theplugin.commons.crucible.api.model.GeneralComment;
import com.atlassian.theplugin.commons.crucible.api.model.Review;
import com.atlassian.theplugin.commons.crucible.api.model.VersionedComment;
import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.Messages;
import static com.intellij.openapi.ui.Messages.showMessageDialog;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;


public class CrucibleCompleteReviewForm extends DialogWrapper {
    private JPanel rootComponent;
    private JComboBox crucibleServersComboBox;
    private JComboBox repoComboBox;
    private JTextField commentCountField;
    private JTextField draftCommentCountField;
    private JCheckBox publishDraftCommentsCheckBox;

    private ReviewData review;
    private boolean complete;
    private CrucibleServerFacade crucibleServerFacade;

    protected CrucibleCompleteReviewForm(ReviewData review, boolean isComplete) {
        super(false);
        this.review = review;
        this.complete = isComplete;        
        this.crucibleServerFacade = CrucibleServerFacadeImpl.getInstance();

        $$$setupUI$$$();
        init();

        if (!isComplete) {
            publishDraftCommentsCheckBox.setSelected(false);
            publishDraftCommentsCheckBox.setVisible(false);
            setTitle("Uncomplete review");
            getOKAction().putValue(Action.NAME, "Uncomplete review...");
        } else {
            setTitle("Complete review");
            getOKAction().putValue(Action.NAME, "Complete review...");
        }

        fillReviewInfo(review);
    }

    public JComponent getPreferredFocusedComponent() {
        return this.crucibleServersComboBox;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootComponent = new JPanel();
        rootComponent.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootComponent.setMinimumSize(new Dimension(450, 200));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(1, 1, 1, 1), -1, -1));
        rootComponent.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        crucibleServersComboBox = new JComboBox();
        panel1.add(crucibleServersComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Server:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repoComboBox = new JComboBox();
        panel1.add(repoComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Repository:");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootComponent.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        label1.setLabelFor(crucibleServersComboBox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootComponent;
    }

    private void fillReviewInfo(final ReviewData review) {
        getOKAction().setEnabled(false);

        new Thread(new Runnable() {
            public void run() {
                Review reviewInfo = null;
                try {
                    reviewInfo = crucibleServerFacade.getReview(review.getServer(), review.getPermId());
                } catch (RemoteApiException e) {
                    // nothing can be done here
                } catch (ServerPasswordNotProvidedException e) {
                    // nothing can be done here
                }
                final ReviewData finalReviewInfo = new ReviewDataImpl(reviewInfo, review.getServer());
                EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        updateReviewInfo(finalReviewInfo);
                    }
                });
            }
        }, "atlassian-idea-plugin crucible patch upload combos refresh").start();
    }

    private void updateReviewInfo(
            ReviewData reviewInfo) {
        String userName = reviewInfo.getServer().getUserName();
        int myComments = 0;
        int myDraftComments = 0;
        try {
            for (GeneralComment generalComment : reviewInfo.getGeneralComments()) {
                if (generalComment.getUser().equals(userName)) {
                    myComments++;
                    if (generalComment.isDraft()) {
                        myDraftComments++;
                    }
                }
            }
            for (VersionedComment versionedComment : reviewInfo.getVersionedComments()) {
                if (versionedComment.getUser().equals(userName)) {
                    myComments++;
                    if (versionedComment.isDraft()) {
                        myDraftComments++;
                    }
                }
            }
            commentCountField.setText(Integer.toString(myComments));
            draftCommentCountField.setText(Integer.toString(myDraftComments));
            if (complete) {
                if (myDraftComments > 0) {
                    publishDraftCommentsCheckBox.setSelected(true);
                    publishDraftCommentsCheckBox.setEnabled(true);
                } else {
                    publishDraftCommentsCheckBox.setSelected(false);
                    publishDraftCommentsCheckBox.setEnabled(false);
                }
            }
            getOKAction().setEnabled(true);
        } catch (ValueNotYetInitialized
                valueNotYetInitialized) {
            valueNotYetInitialized.printStackTrace();
        }
    }

    public JComponent getRootComponent
            () {
        return rootComponent;
    }

    @Nullable
    protected JComponent createCenterPanel
            () {
        return getRootComponent();
    }


    protected void doOKAction
            () {
        try {
            if (publishDraftCommentsCheckBox.isSelected()) {
                crucibleServerFacade.publishAllCommentsForReview(review.getServer(), review.getPermId());
            }
            crucibleServerFacade.completeReview(review.getServer(), review.getPermId(), complete);
        } catch (RemoteApiException e) {
            showMessageDialog(e.getMessage(),
                    "Error " + (complete ? "completing" : "uncompleting") + " review: " + review.getServer().getUrlString(), Messages.getErrorIcon());
        } catch (ServerPasswordNotProvidedException e) {
            showMessageDialog(e.getMessage(), "Error " + (complete ? "completing" : "uncompleting") + " review: " + review.getServer().getUrlString(), Messages.getErrorIcon());
        }
        super.doOKAction();
    }

    private void createUIComponents
            () {
    }
}
