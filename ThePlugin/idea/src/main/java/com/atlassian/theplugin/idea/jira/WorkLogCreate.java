/**
 * Copyright (C) 2008 Atlassian
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.jira;

import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.ui.HyperlinkLabel;
import com.intellij.ide.BrowserUtil;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.atlassian.theplugin.idea.Constants;
import com.atlassian.theplugin.idea.HelpUrl;
import com.atlassian.theplugin.idea.IdeaHelper;
import com.atlassian.theplugin.jira.JIRAServerFacade;
import com.atlassian.theplugin.jira.api.JIRAException;
import com.atlassian.theplugin.jira.api.JIRAAction;
import com.atlassian.theplugin.jira.api.JIRAActionField;
import com.atlassian.theplugin.commons.Server;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.HyperlinkEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.text.DateFormat;
import javax.management.timer.Timer;

import net.sf.nachocalendar.components.CalendarPanel;
import net.sf.nachocalendar.model.DateSelectionModel;


public class WorkLogCreate extends DialogWrapper {
    private JPanel contentPane;
    private JSpinner minutes;
    private JSpinner hours;
    private JSpinner days;
    private JSpinner weeks;
    private JTextArea comment;
    private JButton endDateChange;
    private JLabel endDateLabel;
    private HyperlinkLabel helpLabel;
    private JCheckBox stopProgress;
    private JLabel stopProgressLabel;
    private boolean haveIssueStopProgressInfo = false;
    private JIRAAction inProgressAction;
    NonZeroChangeListener listener;
    JIRAServerFacade facade;
    private Date endTime;
    private final Calendar now = Calendar.getInstance();
    SpinnerNumberModel weekModel = new SpinnerNumberModel(0, 0, null, 1);
    SpinnerNumberModel dayModel = new SpinnerNumberModel(0, 0, null, 1);
    SpinnerNumberModel hourModel = new SpinnerNumberModel(0, 0, null, 1);
    SpinnerNumberModel minuteModel = new SpinnerNumberModel(0, 0, null, 1);

    private void createUIComponents() {
        helpLabel = new HyperlinkLabel("Help");
        final String helpUrl = HelpUrl.getHelpUrl(Constants.HELP_JIRA_WORKLOG);

        helpLabel.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent e) {
                BrowserUtil.launchBrowser(helpUrl);
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setMinimumSize(new Dimension(700, 300));
        contentPane.setPreferredSize(new Dimension(700, 300));
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 12, 12, 12);
        contentPane.add(scrollPane1, gbc);
        comment = new JTextArea();
        scrollPane1.setViewportView(comment);
        final JLabel label1 = new JLabel();
        label1.setText("Comment:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        gbc.insets = new Insets(0, 12, 0, 0);
        contentPane.add(label1, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridwidth = 7;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(12, 12, 0, 12);
        contentPane.add(panel1, gbc);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        days = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weightx = 0.25;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(days, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Days");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 0, 12);
        panel1.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Hours");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 0, 12);
        panel1.add(label3, gbc);
        hours = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.weightx = 0.25;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(hours, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Minutes");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 0, 12);
        panel1.add(label4, gbc);
        minutes = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 0;
        gbc.weightx = 0.25;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(minutes, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Weeks");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 0, 12);
        panel1.add(label5, gbc);
        weeks = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.25;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(weeks, gbc);
        final JLabel label6 = new JLabel();
        label6.setText("Time spent:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(12, 12, 0, 0);
        contentPane.add(label6, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 12, 12, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel2, gbc);
        endDateLabel = new JLabel();
        endDateLabel.setText("1/01/08 12:00");
        panel2.add(endDateLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endDateChange = new JButton();
        endDateChange.setText("Change");
        panel2.add(endDateChange, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("End time:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 0, 0);
        contentPane.add(label7, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 12);
        contentPane.add(helpLabel, gbc);
        stopProgress = new JCheckBox();
        stopProgress.setEnabled(false);
        stopProgress.setHorizontalAlignment(2);
        stopProgress.setHorizontalTextPosition(10);
        stopProgress.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 12, 0);
        contentPane.add(stopProgress, gbc);
        stopProgressLabel = new JLabel();
        stopProgressLabel.setEnabled(false);
        stopProgressLabel.setText("Stop progress:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 12, 12, 0);
        contentPane.add(stopProgressLabel, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    class NonZeroChangeListener implements ChangeListener {
        public void stateChanged(ChangeEvent e) {
            boolean nonZero =
                    (((Integer) weeks.getValue()).intValue()
                            + ((Integer) days.getValue()).intValue()
                            + ((Integer) hours.getValue()).intValue()
                            + ((Integer) minutes.getValue()).intValue()) > 0;
            setOKActionEnabled(nonZero && haveIssueStopProgressInfo);
        }
    }

    public WorkLogCreate(final JIRAServerFacade jiraFacade, final JiraIssueAdapter adapter) {
        super(false);

        this.facade = jiraFacade;

        $$$setupUI$$$();
        init();
        setTitle("Add Worklog for " + adapter.getKey());
        setOKActionEnabled(false);
        getOKAction().putValue(Action.NAME, "Add Worklog");

        weeks.setModel(weekModel);
        days.setModel(dayModel);
        hours.setModel(hourModel);
        minutes.setModel(minuteModel);

        listener = new NonZeroChangeListener();
        weeks.addChangeListener(listener);
        days.addChangeListener(listener);
        hours.addChangeListener(listener);
        minutes.addChangeListener(listener);

        endTime = now.getTime();

        endDateLabel.setText(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(now.getTime()));

        endDateChange.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                TimeDatePicker tdp = new TimeDatePicker(endTime);
                if (tdp.isOK()) {
                    endTime = tdp.getSelectedTime();
                    String s = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(endTime);
                    endDateLabel.setText(s);
                }
            }
        });
        new Thread(new Runnable() {
            public void run() {
                try {
                    Server server = IdeaHelper.getCurrentJIRAServer().getServer();
                    List<JIRAAction> actions = facade.getAvailableActions(server, adapter.getIssue());
                    for (JIRAAction a : actions) {
                        if (a.getId() == 301) {
                            List<JIRAActionField> fields = facade.getFieldsForAction(server, adapter.getIssue(), a);
                            if (fields.isEmpty()) {
                                stopProgress.setEnabled(true);
                                stopProgressLabel.setEnabled(true);
                                inProgressAction = a;
                            }
                            break;
                        }
                    }
                } catch (JIRAException e) {
                    // well, let's ignore, this is an optional functionality anyway...
                }
                haveIssueStopProgressInfo = true;
                listener.stateChanged(null);
            }
        }).start();
    }

    public String getTimeSpentString() {
        StringBuffer b = new StringBuffer();
        b.append(weeks.getValue().toString()).append("w");
        b.append(days.getValue().toString()).append("d");
        b.append(hours.getValue().toString()).append("h");
        b.append(minutes.getValue().toString()).append("m");
        return b.toString();
    }

    public Date getEndDate() {
        return (Date) endTime.clone();
    }

    public Date getStartDate() {
        Date d = endTime;
        long t = d.getTime()
                - (weekModel.getNumber().longValue() * Timer.ONE_WEEK)
                - (dayModel.getNumber().longValue() * Timer.ONE_DAY)
                - (hourModel.getNumber().longValue() * Timer.ONE_HOUR)
                - (minuteModel.getNumber().longValue() * Timer.ONE_MINUTE);
        d.setTime(t);
        return d;
    }

    public String getComment() {
        return comment.getText();
    }

    public boolean isStopProgressSelected() {
        return stopProgress.isSelected();
    }

    public JIRAAction getInProgressAction() {
        return inProgressAction;
    }

    protected JComponent createCenterPanel() {
        return contentPane;
    }

    private class TimeDatePicker extends DialogWrapper {

        private JPanel panel = new JPanel();

        private CalendarPanel calendar;
        private JSpinner hour = new JSpinner();
        private JSpinner minute = new JSpinner();
        private SpinnerNumberModel hourModel;
        private SpinnerNumberModel minuteModel;


        TimeDatePicker(Date now) {
            super(false);
            init();

            calendar = new CalendarPanel(1);
            calendar.setSelectionMode(DateSelectionModel.SINGLE_SELECTION);

            Date nowZeroZero = (Date) now.clone();
            nowZeroZero.setHours(0);
            nowZeroZero.setMinutes(0);
            nowZeroZero.setSeconds(0);

            calendar.setDate(nowZeroZero);
            calendar.setValue(nowZeroZero);

            Calendar cal = Calendar.getInstance();
            cal.setTime(now);
            hourModel = new SpinnerNumberModel(cal.get(Calendar.HOUR_OF_DAY), 0, 24, 1);
            minuteModel = new SpinnerNumberModel(cal.get(Calendar.MINUTE), 0, 60, 1);
            hour.setModel(hourModel);
            minute.setModel(minuteModel);

            setTitle("Set End Time");

            panel.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();

            gbc.anchor = GridBagConstraints.CENTER;
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.gridwidth = 2;
            gbc.weightx = 1;
            gbc.insets = new Insets(Constants.DIALOG_MARGIN, Constants.DIALOG_MARGIN, 0, Constants.DIALOG_MARGIN);
            panel.add(new JLabel("Day", SwingConstants.CENTER), gbc);
            gbc.gridy = 1;
            panel.add(calendar, gbc);

            gbc.gridx = 0;
            gbc.gridy = 2;
            gbc.gridwidth = 1;
            gbc.weightx = 0.5;
            panel.add(new JLabel("hour", SwingConstants.CENTER), gbc);
            gbc.gridy = 3;
            panel.add(hour, gbc);

            gbc.gridx = 1;
            gbc.gridy = 2;
            panel.add(new JLabel("minute", SwingConstants.CENTER), gbc);
            gbc.gridy = 3;
            panel.add(minute, gbc);
            show();
        }

        protected JComponent createCenterPanel() {
            return panel;
        }

        public Date getSelectedTime() {
            Date d = (Date) calendar.getValue();
            long newTime = d.getTime();
            newTime += hourModel.getNumber().intValue() * Timer.ONE_HOUR;
            newTime += minuteModel.getNumber().intValue() * Timer.ONE_MINUTE;
            d.setTime(newTime);
            return d;
        }
    }

}
