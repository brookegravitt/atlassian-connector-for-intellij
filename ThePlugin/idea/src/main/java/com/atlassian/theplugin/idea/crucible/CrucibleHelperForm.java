/**
 * Copyright (C) 2008 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.crucible;

import com.atlassian.theplugin.commons.Server;
import com.atlassian.theplugin.commons.ServerType;
import com.atlassian.theplugin.commons.configuration.ConfigurationFactory;
import com.atlassian.theplugin.commons.configuration.ProductServerConfiguration;
import com.atlassian.theplugin.commons.crucible.CrucibleServerFacade;
import com.atlassian.theplugin.commons.crucible.api.model.*;
import com.atlassian.theplugin.commons.exception.ServerPasswordNotProvidedException;
import com.atlassian.theplugin.commons.remoteapi.RemoteApiException;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.Messages;
import static com.intellij.openapi.ui.Messages.showMessageDialog;
import com.intellij.openapi.vcs.changes.Change;
import com.intellij.openapi.vcs.changes.ChangeList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.ide.BrowserUtil;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

enum AddMode {
    ADDREVISION,
    ADDPATCH,
    VIEWREVISION
}

public class CrucibleHelperForm extends DialogWrapper {
    private JPanel rootComponent;
    private JComboBox crucibleServersComboBox;
    private JComboBox repoComboBox;

    private CrucibleServerFacade crucibleServerFacade;
    private ChangeList[] changes;
    private PermId permId;
    private String rev;
    private String patch;
    private AddMode mode;

    protected CrucibleHelperForm(CrucibleServerFacade crucibleServerFacade, PermId permId, ChangeList[] changes) {
        this(crucibleServerFacade);
        this.permId = permId;
        this.changes = changes;
        this.mode = AddMode.ADDREVISION;
        setTitle("Add revision");
        getOKAction().putValue(Action.NAME, "Add revision...");
    }

    protected CrucibleHelperForm(CrucibleServerFacade crucibleServerFacade, String rev) {
        this(crucibleServerFacade);
        this.rev = rev;
        this.mode = AddMode.VIEWREVISION;
        setTitle("View revision");
        getOKAction().putValue(Action.NAME, "View revision...");
    }

    protected CrucibleHelperForm(CrucibleServerFacade crucibleServerFacade, PermId permId, String patch) {
        this(crucibleServerFacade);
        this.permId = permId;
        this.patch = patch;
        this.mode = AddMode.ADDPATCH;
        setTitle("Add patch");
        getOKAction().putValue(Action.NAME, "Add patch...");
    }

    private CrucibleHelperForm(CrucibleServerFacade crucibleServerFacade) {
        super(false);

        this.crucibleServerFacade = crucibleServerFacade;
        $$$setupUI$$$();
        init();

        crucibleServersComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (crucibleServersComboBox.getItemCount() > 0 && crucibleServersComboBox.getSelectedItem() != null && crucibleServersComboBox.getSelectedItem() instanceof ServerComboBoxItem) {
                    fillServerRelatedCombos(((ServerComboBoxItem) crucibleServersComboBox.getSelectedItem()).getServer());
                }
            }
        });

        fillInCrucibleServers();
    }

    public JComponent getPreferredFocusedComponent() {
        return this.crucibleServersComboBox;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootComponent = new JPanel();
        rootComponent.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootComponent.setMinimumSize(new Dimension(450, 200));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(1, 1, 1, 1), -1, -1));
        rootComponent.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        crucibleServersComboBox = new JComboBox();
        panel1.add(crucibleServersComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Server:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repoComboBox = new JComboBox();
        panel1.add(repoComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Repository:");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootComponent.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        label1.setLabelFor(crucibleServersComboBox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootComponent;
    }

    private static final class ServerComboBoxItem {
        private final Server server;

        private ServerComboBoxItem(Server server) {
            this.server = server;
        }

        public String toString() {
            return server.getName();
        }

        public Server getServer() {
            return server;
        }
    }

    private void fillInCrucibleServers() {
        ProductServerConfiguration crucibleConfiguration =
                ConfigurationFactory.getConfiguration().getProductServers(ServerType.CRUCIBLE_SERVER);

        Collection<Server> enabledServers = crucibleConfiguration.transientgetEnabledServers();
        if (enabledServers.isEmpty()) {
            crucibleServersComboBox.setEnabled(false);
            crucibleServersComboBox.addItem("Enable a Crucible server first!");
            getOKAction().setEnabled(false);
        } else {
            for (Server server : enabledServers) {
                crucibleServersComboBox.addItem(new ServerComboBoxItem(server));
            }
        }
    }

    private void fillServerRelatedCombos(final Server server) {
        repoComboBox.removeAllItems();
        getOKAction().setEnabled(false);

        new Thread(new Runnable() {
            public void run() {
                List<Project> projects = new ArrayList<Project>();
                List<Repository> repositories = new ArrayList<Repository>();
                List<User> users = new ArrayList<User>();

                try {
                    projects = crucibleServerFacade.getProjects(server);
                    repositories = crucibleServerFacade.getRepositories(server);
                    users = crucibleServerFacade.getUsers(server);
                } catch (RemoteApiException e) {
                    // nothing can be done here
                } catch (ServerPasswordNotProvidedException e) {
                    // nothing can be done here
                }
                final List<Repository> finalRepositories = repositories;
                EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        updateServerRelatedCombos(server, finalRepositories);
                    }
                });
            }
        }, "atlassian-idea-plugin crucible patch upload combos refresh").start();
    }

    private void updateServerRelatedCombos(
            Server server,
            List<Repository> repositories) {
        repoComboBox.addItem("");
        if (!repositories.isEmpty()) {
            for (Repository repo : repositories) {
                repoComboBox.addItem(new RepositoryComboBoxItem(repo));
            }
            getOKAction().setEnabled(true);
        }
    }

    private static final class RepositoryComboBoxItem {
        private final Repository repo;

        private RepositoryComboBoxItem(Repository repo) {
            this.repo = repo;
        }

        public String toString() {
            return repo.getName();
        }

        public Repository getRepository() {
            return repo;
        }
    }


    public JComponent getRootComponent() {
        return rootComponent;
    }

    @Nullable
    protected JComponent createCenterPanel() {
        return getRootComponent();
    }


    protected void doOKAction() {
        Server server = ((ServerComboBoxItem) crucibleServersComboBox.getSelectedItem()).getServer();
        Repository repo = ((RepositoryComboBoxItem) this.repoComboBox.getSelectedItem()).getRepository();
        switch (mode) {
            case ADDREVISION:
                try {
                    List<String> revisions = new ArrayList<String>();
                    for (ChangeList change : changes) {
                        for (Change change1 : change.getChanges()) {
                            revisions.add(change1.getAfterRevision().getRevisionNumber().asString());
                            break;
                        }
                    }
                    Review draftReview = crucibleServerFacade.addRevisionsToReview(server, permId, repo.getName(), revisions);
                    super.doOKAction();

                } catch (RemoteApiException e) {
                    showMessageDialog(e.getMessage(),
                            "Error creating review: " + server.getUrlString(), Messages.getErrorIcon());
                } catch (ServerPasswordNotProvidedException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                break;

            case ADDPATCH:
                try {
                    Review draftReview = crucibleServerFacade.addPatchToReview(server, permId, repo.getName(), patch);
                    super.doOKAction();

                } catch (RemoteApiException e) {
                    showMessageDialog(e.getMessage(),
                            "Error creating review: " + server.getUrlString(), Messages.getErrorIcon());
                } catch (ServerPasswordNotProvidedException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                break;

            case VIEWREVISION:
                String url = server.getUrlString() + "/changelog/" + repo.getName() + "/?cs=" + rev;
                BrowserUtil.launchBrowser(url);
                super.doOKAction();                
                break;
        }
    }

    private void createUIComponents() {
    }
}