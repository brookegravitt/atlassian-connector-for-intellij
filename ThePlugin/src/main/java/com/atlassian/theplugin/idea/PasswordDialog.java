package com.atlassian.theplugin.idea;

import com.atlassian.theplugin.bamboo.BambooServerFactory;
import com.atlassian.theplugin.bamboo.api.BambooLoginException;
import com.atlassian.theplugin.configuration.Server;
import com.intellij.openapi.ui.Messages;
import static com.intellij.openapi.ui.Messages.showMessageDialog;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;

public class PasswordDialog extends JDialog {

	private JPanel passwordPanel;
	private JCheckBox chkRememberPassword;
	private JPasswordField password;
	private JButton testConnectionButton;
	private JLabel lblCommand;
	private JTextField username;
	private transient Server server;

	public PasswordDialog(final Server server) {
		this.server = server;
		setContentPane(passwordPanel);
		setModal(true);
// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});
		lblCommand.setText("Please provide password to connect \"" + this.server.getName() + "\" server");
// call onCancel() on ESCAPE
		passwordPanel.registerKeyboardAction(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		testConnectionButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				try {
					BambooServerFactory.getBambooServerFacade().testServerConnection(
							server.getUrlString(),
							server.getUsername(),
							getPasswordString());
					showMessageDialog("Connected successfully", "Connection OK", Messages.getInformationIcon());
				} catch (BambooLoginException e1) {
					showMessageDialog(e1.getMessage(), "Connection Error" + server.getUrlString()
							+ "-" + getPasswordString(), Messages.getErrorIcon());
				}
			}
		});
	}

	private void onCancel() {
// add your code here if necessary
		dispose();
	}

	public JPanel getPasswordPanel() {
		return passwordPanel;
	}

	public String getPasswordString() {
		return String.valueOf(password.getPassword());
	}

	public Boolean getShouldPasswordBeStored() {
		return chkRememberPassword.isSelected();
	}

	public void setUserName(String username) {
		this.username.setText(username);
	}

	public String getUserName() {
		return this.username.getText();
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		passwordPanel = new JPanel();
		passwordPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
		passwordPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		password = new JPasswordField();
		panel1.add(password, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		testConnectionButton = new JButton();
		testConnectionButton.setText("Test connection");
		testConnectionButton.setMnemonic('T');
		testConnectionButton.setDisplayedMnemonicIndex(0);
		panel1.add(testConnectionButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		chkRememberPassword = new JCheckBox();
		chkRememberPassword.setEnabled(true);
		chkRememberPassword.setSelected(false);
		chkRememberPassword.setText("Store password in configuration");
		panel1.add(chkRememberPassword, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		lblCommand = new JLabel();
		lblCommand.setText("");
		panel1.add(lblCommand, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Password");
		panel1.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("User Name");
		panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		username = new JTextField();
		panel1.add(username, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		label1.setLabelFor(password);
		label2.setLabelFor(username);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return passwordPanel;
	}
}
