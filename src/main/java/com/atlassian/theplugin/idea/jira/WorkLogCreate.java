/**
 * Copyright (C) 2008 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.jira;

import com.atlassian.theplugin.commons.cfg.JiraServerCfg;
import com.atlassian.theplugin.idea.Constants;
import com.atlassian.theplugin.idea.HelpUrl;
import com.atlassian.theplugin.jira.JIRAIssueProgressTimestampCache;
import com.atlassian.theplugin.jira.JIRAServerFacade;
import com.atlassian.theplugin.jira.api.JIRAAction;
import com.atlassian.theplugin.jira.api.JIRAActionField;
import com.atlassian.theplugin.jira.api.JIRAException;
import com.atlassian.theplugin.jira.api.JIRAIssue;
import com.intellij.ide.BrowserUtil;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.Messages;
import com.intellij.ui.HyperlinkLabel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.sf.nachocalendar.components.CalendarPanel;
import net.sf.nachocalendar.model.DateSelectionModel;
import org.jetbrains.annotations.NotNull;

import javax.management.timer.Timer;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class WorkLogCreate extends DialogWrapper {
	private JPanel contentPane;
	private JTextArea comment;
	private JButton endDateChange;
	private JLabel endDateLabel;
	private HyperlinkLabel helpLabel;
	private JCheckBox stopProgress;
	private JLabel stopProgressLabel;
	private JTextField timeSpentField;
	private JRadioButton btnLeaveUnchanged;
	private JRadioButton btnAutoUpdate;
	private JRadioButton btnUpdateManually;
	private JTextField remainingEstimateField;
	private JLabel remainingEstimateLabel;
	private JTextPane anEstimateOfHowTextPane;
	private boolean haveIssueStopProgressInfo;
	private JIRAAction stopProgressAction;
	private JIRAServerFacade facade;
	private Date endTime;

	private WdhmInputListener timeSpentListener;
	private WdhmInputListener remainingEstimateListener;

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new GridBagLayout());
		contentPane.setMinimumSize(new Dimension(700, 300));
		contentPane.setPreferredSize(new Dimension(700, 300));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		panel1.setMinimumSize(new Dimension(600, 200));
		panel1.setPreferredSize(new Dimension(600, 200));
		panel1.setRequestFocusEnabled(true);
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 8;
		gbc.gridy = 0;
		gbc.gridheight = 2;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(12, 12, 12, 12);
		contentPane.add(panel1, gbc);
		timeSpentField = new JTextField();
		timeSpentField.setMinimumSize(new Dimension(100, 28));
		timeSpentField.setPreferredSize(new Dimension(150, 28));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel1.add(timeSpentField, gbc);
		final JLabel label1 = new JLabel();
		label1.setText("End time:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.WEST;
		panel1.add(label1, gbc);
		final JLabel label2 = new JLabel();
		label2.setText("Time spent:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panel1.add(label2, gbc);
		stopProgressLabel = new JLabel();
		stopProgressLabel.setEnabled(false);
		stopProgressLabel.setText("Stop progress:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 12, 12);
		panel1.add(stopProgressLabel, gbc);
		stopProgress = new JCheckBox();
		stopProgress.setEnabled(false);
		stopProgress.setHorizontalAlignment(2);
		stopProgress.setHorizontalTextPosition(10);
		stopProgress.setText("");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 7;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 12, 0);
		panel1.add(stopProgress, gbc);
		final JLabel label3 = new JLabel();
		label3.setText("Comment:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 8;
		gbc.weighty = 1.0;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		panel1.add(label3, gbc);
		final JScrollPane scrollPane1 = new JScrollPane();
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 8;
		gbc.gridwidth = 8;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(scrollPane1, gbc);
		comment = new JTextArea();
		scrollPane1.setViewportView(comment);
		final JLabel label4 = new JLabel();
		label4.setText("Remaining Estimate:");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 0, 0, 12);
		panel1.add(label4, gbc);
		btnLeaveUnchanged = new JRadioButton();
		btnLeaveUnchanged.setText("Leave Unchanged");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 4;
		gbc.anchor = GridBagConstraints.WEST;
		panel1.add(btnLeaveUnchanged, gbc);
		btnUpdateManually = new JRadioButton();
		btnUpdateManually.setEnabled(true);
		btnUpdateManually.setText("Update Manually");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 5;
		gbc.anchor = GridBagConstraints.WEST;
		panel1.add(btnUpdateManually, gbc);
		remainingEstimateLabel = new JLabel();
		remainingEstimateLabel.setEnabled(false);
		remainingEstimateLabel.setText("New Remaining Estimate:");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 6;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.insets = new Insets(0, 24, 0, 12);
		panel1.add(remainingEstimateLabel, gbc);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		gbc = new GridBagConstraints();
		gbc.gridx = 2;
		gbc.gridy = 6;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel2, gbc);
		remainingEstimateField = new JTextField();
		remainingEstimateField.setEnabled(false);
		remainingEstimateField.setMinimumSize(new Dimension(100, 28));
		remainingEstimateField.setPreferredSize(new Dimension(150, 28));
		panel2.add(remainingEstimateField,
				new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
						GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1),
						null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(12, 0, 12, 0);
		panel1.add(panel3, gbc);
		endDateLabel = new JLabel();
		endDateLabel.setText("1/01/08 12:00");
		panel3.add(endDateLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(109, 16), null, 0,
				false));
		endDateChange = new JButton();
		endDateChange.setText("Change");
		panel3.add(endDateChange, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
				null, null, null, 0, false));
		btnAutoUpdate = new JRadioButton();
		btnAutoUpdate.setSelected(true);
		btnAutoUpdate.setText("Auto Update");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.anchor = GridBagConstraints.WEST;
		panel1.add(btnAutoUpdate, gbc);
		anEstimateOfHowTextPane = new JTextPane();
		anEstimateOfHowTextPane.setEditable(false);
		anEstimateOfHowTextPane.setEnabled(true);
		anEstimateOfHowTextPane.setMargin(new Insets(0, 12, 0, 0));
		anEstimateOfHowTextPane.setOpaque(false);
		anEstimateOfHowTextPane.setText(
				"An estimate of how much time you have spent working. \nThe format of this is ' *w *d *h *m ' \n(representing weeks, days, hours and minutes - where * can be any number) \nExamples: 4d, 5h 30m, 60m and 3w. ");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 1;
		gbc.gridwidth = 8;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(anEstimateOfHowTextPane, gbc);
		gbc = new GridBagConstraints();
		gbc.gridx = 8;
		gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.EAST;
		gbc.insets = new Insets(0, 0, 0, 12);
		contentPane.add(helpLabel, gbc);
		ButtonGroup buttonGroup;
		buttonGroup = new ButtonGroup();
		buttonGroup.add(btnUpdateManually);
		buttonGroup.add(btnAutoUpdate);
		buttonGroup.add(btnLeaveUnchanged);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	private class WdhmInputListener implements DocumentListener {

		private static final String REGEX = "^\\s*(\\d+w)?\\s*(\\d+d)?\\s*(\\d+h)?\\s*(\\d+m)?\\s*$";

		private JTextField field;
		private boolean matchFound;

		public WdhmInputListener(JTextField field) {
			this.field = field;
		}

		private class Period {
			public Period(String r) {
				regex = r;
				interval = 0;
			}

			public long getInterval() {
				return interval;
			}

			private long interval;

			public String getRegex() {
				return regex;
			}

			private String regex;

			public void findAndSet(String txt) {
				Pattern p = Pattern.compile("(\\d+)" + regex);
				Matcher m = p.matcher(txt);
				if (m.matches()) {
					String subs = txt.substring(m.start(1), m.end(1));
					interval = Long.valueOf(subs);
				}
			}
		}

		private Period weeks = new Period("w");
		private Period days = new Period("d");
		private Period hours = new Period("h");
		private Period minutes = new Period("m");

		public void insertUpdate(DocumentEvent e) {
			stateChanged();
		}

		public void removeUpdate(DocumentEvent e) {
			stateChanged();
		}

		public void changedUpdate(DocumentEvent e) {
			stateChanged();
		}

		public void stateChanged() {
			if (!field.isEnabled()) {
				return;
			}

			String text = field.getText();

			Pattern p = Pattern.compile(REGEX);
			Matcher m = p.matcher(text);
			Color c;

			matchFound = m.matches() && text.length() > 0;
			c = matchFound ? Color.BLACK : Color.RED;
			field.setForeground(c);
			updateOKAction();

			if (matchFound) {
				weeks.findAndSet(text);
				days.findAndSet(text);
				hours.findAndSet(text);
				minutes.findAndSet(text);
			}
		}

		public long getWeeks() {
			return weeks.interval;
		}

		public long getDays() {
			return days.interval;
		}

		public long getHours() {
			return hours.interval;
		}

		public long getMinutes() {
			return minutes.interval;
		}

		public boolean isOk() {
			return matchFound;
		}
	}

	private void createUIComponents() {
		helpLabel = new HyperlinkLabel("Help");
		final String helpUrl = HelpUrl.getHelpUrl(Constants.HELP_JIRA_WORKLOG);

		helpLabel.addHyperlinkListener(new HyperlinkListener() {
			public void hyperlinkUpdate(HyperlinkEvent e) {
				BrowserUtil.launchBrowser(helpUrl);
			}
		});
	}

	private void updateOKAction() {
		boolean enable = haveIssueStopProgressInfo && timeSpentListener.isOk();
		if (remainingEstimateField.isEnabled() && enable) {
			enable = remainingEstimateListener.isOk();
		}
		setOKActionEnabled(enable);
	}

	private static final long MILLIS_IN_HOUR = 1000 * 3600;
	private static final long MILLIS_IN_MINUTE = 1000 * 60;
	private static final long MAX_ALLOWED_HOURS = 5;

	@NotNull
	public static String getFormatedDurationString(Date startTime) {
		String result = "";

		Date currentTime = new Date();
		long timediff = currentTime.getTime() - startTime.getTime();
		if (timediff <= 0) {
			return result;
		}

		long hours = timediff / MILLIS_IN_HOUR;

		// if somebody works without a break for more than 5 hours, then they are mutants and I don't serve mutants :)
		if (hours < MAX_ALLOWED_HOURS) {
			if (hours > 0) {
				result += Long.valueOf(hours).toString() + "h";
			}

			long minutes = (timediff % MILLIS_IN_HOUR) / MILLIS_IN_MINUTE;

			if (minutes > 0) {
				if (hours > 0) {
					result += " ";
				}
				result += Long.valueOf(minutes).toString() + "m";
			}
		}
		return result;
	}

	public WorkLogCreate(final JiraServerCfg jiraServer, final JIRAServerFacade jiraFacade, final JIRAIssue issue,
			Project project) {
		super(false);

		this.facade = jiraFacade;

		$$$setupUI$$$();
		init();
		setTitle("Add Worklog for " + issue.getKey());
		setOKActionEnabled(false);
		getOKAction().putValue(Action.NAME, "Add Worklog");

		timeSpentListener = new WdhmInputListener(timeSpentField);
		remainingEstimateListener = new WdhmInputListener(remainingEstimateField);

		timeSpentField.getDocument().addDocumentListener(timeSpentListener);

		Date startProgressTimestamp = JIRAIssueProgressTimestampCache.getInstance().getTimestamp(jiraServer, issue);
		if (startProgressTimestamp != null) {
			timeSpentField.setText(getFormatedDurationString(startProgressTimestamp));
		}

		remainingEstimateField.getDocument().addDocumentListener(remainingEstimateListener);

		final Calendar now = Calendar.getInstance();
		endTime = now.getTime();

		endDateLabel.setText(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(now.getTime()));

		endDateChange.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TimeDatePicker tdp = new TimeDatePicker(endTime);
				if (tdp.isOK()) {
					endTime = tdp.getSelectedTime();
					String s = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(endTime);
					endDateLabel.setText(s);
				}
			}
		});

		btnUpdateManually.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				boolean b = btnUpdateManually.isSelected();
				remainingEstimateField.setEnabled(b);
				remainingEstimateLabel.setEnabled(b);
				updateOKAction();
			}
		});

		if (jiraServer == null) {
			Messages.showErrorDialog(project, "There is no selected JIRA Server", "Error");
			return;
		}

		new Thread(new Runnable() {
			public void run() {
				try {
					List<JIRAAction> actions = facade.getAvailableActions(jiraServer, issue);
					for (JIRAAction a : actions) {
						if (a.getId() == Constants.JiraActionId.STOP_PROGRESS.getId()) {
							List<JIRAActionField> fields = facade.getFieldsForAction(jiraServer, issue, a);
							if (fields.isEmpty()) {
								stopProgress.setEnabled(true);
								stopProgressLabel.setEnabled(true);
								stopProgressAction = a;
							}
							break;
						}
					}
				}
				catch (JIRAException e) {
					// well, let's ignore, this is an optional functionality anyway...
				}
				haveIssueStopProgressInfo = true;
				timeSpentListener.stateChanged();
			}
		}).start();
	}

	public String getTimeSpentString() {
		return timeSpentField.getText();
	}

	public String getRemainingEstimateString() {
		return remainingEstimateField.getText();
	}

	public Date getEndDate() {
		return (Date) endTime.clone();
	}

	public Date getStartDate() {
		Date d = endTime;
		long t = d.getTime() - (timeSpentListener.getWeeks() * Timer.ONE_WEEK) - (timeSpentListener.getDays() * Timer.ONE_DAY)
				- (timeSpentListener.getHours() * Timer.ONE_HOUR) - (timeSpentListener.getMinutes() * Timer.ONE_MINUTE);
		d.setTime(t);
		return d;
	}

	public String getComment() {
		return comment.getText();
	}

	public boolean isStopProgressSelected() {
		return stopProgress.isSelected();
	}

	public JIRAAction getStopProgressAction() {
		return stopProgressAction;
	}

	public boolean getAutoUpdateRemaining() {
		return btnAutoUpdate.isSelected();
	}

	public boolean getLeaveRemainingUnchanged() {
		return btnLeaveUnchanged.isSelected();
	}

	public boolean getUpdateRemainingManually() {
		return btnUpdateManually.isSelected();
	}

	@Override
	protected JComponent createCenterPanel() {
		return contentPane;
	}

	private class TimeDatePicker extends DialogWrapper {

		private JPanel panel = new JPanel();

		private CalendarPanel calendar;
		private JSpinner hour = new JSpinner();
		private JSpinner minute = new JSpinner();
		private SpinnerNumberModel hourModel;
		private SpinnerNumberModel minuteModel;


		TimeDatePicker(Date now) {
			super(false);
			init();

			calendar = new CalendarPanel(1);
			calendar.setSelectionMode(DateSelectionModel.SINGLE_SELECTION);

			Calendar nowcal = Calendar.getInstance();
			nowcal.setTime(now);
			nowcal.set(Calendar.HOUR_OF_DAY, 0);
			nowcal.set(Calendar.MINUTE, 0);
			nowcal.set(Calendar.SECOND, 0);
			nowcal.set(Calendar.MILLISECOND, 0);

			Date nowZeroZero = nowcal.getTime();

			calendar.setDate(nowZeroZero);
			calendar.setValue(nowZeroZero);

			Calendar cal = Calendar.getInstance();
			cal.setTime(now);
			hourModel = new SpinnerNumberModel(cal.get(Calendar.HOUR_OF_DAY), 0, 24, 1);
			minuteModel = new SpinnerNumberModel(cal.get(Calendar.MINUTE), 0, 60, 1);
			hour.setModel(hourModel);
			minute.setModel(minuteModel);

			setTitle("Set End Time");

			panel.setLayout(new GridBagLayout());
			GridBagConstraints gbc = new GridBagConstraints();

			gbc.anchor = GridBagConstraints.CENTER;
			gbc.fill = GridBagConstraints.HORIZONTAL;
			gbc.gridx = 0;
			gbc.gridy = 0;
			gbc.gridwidth = 2;
			gbc.weightx = 1;
			gbc.insets = new Insets(Constants.DIALOG_MARGIN, Constants.DIALOG_MARGIN, 0, Constants.DIALOG_MARGIN);
			panel.add(new JLabel("Day", SwingConstants.CENTER), gbc);
			gbc.gridy = 1;
			panel.add(calendar, gbc);

			gbc.gridx = 0;
			gbc.gridy = 2;
			gbc.gridwidth = 1;
			gbc.weightx = 0.5;
			panel.add(new JLabel("hour", SwingConstants.CENTER), gbc);
			gbc.gridy = 3;
			panel.add(hour, gbc);

			gbc.gridx = 1;
			gbc.gridy = 2;
			panel.add(new JLabel("minute", SwingConstants.CENTER), gbc);
			gbc.gridy = 3;
			panel.add(minute, gbc);
			show();
		}

		@Override
		protected JComponent createCenterPanel() {
			return panel;
		}

		public Date getSelectedTime() {
			Date d = (Date) calendar.getValue();
			long newTime = d.getTime();
			newTime += hourModel.getNumber().intValue() * Timer.ONE_HOUR;
			newTime += minuteModel.getNumber().intValue() * Timer.ONE_MINUTE;
			d.setTime(newTime);
			return d;
		}
	}

}
