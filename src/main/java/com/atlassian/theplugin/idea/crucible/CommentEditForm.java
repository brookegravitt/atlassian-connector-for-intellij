/**
 * Copyright (C) 2008 Atlassian
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.atlassian.theplugin.idea.crucible;

import com.atlassian.theplugin.commons.crucible.api.model.CommentBean;
import com.atlassian.theplugin.commons.crucible.api.model.GeneralCommentBean;
import com.atlassian.theplugin.commons.crucible.api.model.Review;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class CommentEditForm extends DialogWrapper {
    private JPanel rootComponent;
    private JTextArea commentText;
    private JScrollPane commentPane;
    private JCheckBox defectCheckBox;
    private JComboBox rankComboBox;
    private JComboBox classificationComboBox;
    private JButton postButton;
    private JButton saveAsDraftButton;
    private JButton cancelButton;

    private Review review;
    private CommentBean comment;

    private boolean saveAsDraft = false;

    public CommentEditForm(Project project, Review review, CommentBean comment) {
        super(project, false);

        this.review = review;
        this.comment = comment;

        $$$setupUI$$$();
        init();

        rankComboBox.addItem("select rank");
        classificationComboBox.addItem("select classification");

        postButton.setAction(getOKAction());
        postButton.setMnemonic('P');
        saveAsDraftButton.setAction(getDraftAction());
        saveAsDraftButton.setMnemonic('D');
        cancelButton.setAction(getCancelAction());

        defectCheckBox.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent event) {
                rankComboBox.setVisible(defectCheckBox.isSelected());
                classificationComboBox.setVisible(defectCheckBox.isSelected());
            }
        });
        defectCheckBox.setSelected(false);
        rankComboBox.setVisible(false);
        classificationComboBox.setVisible(false);

        if (comment.isReply()) {
            defectCheckBox.setVisible(false);
            setTitle("Reply to comment");
        } else {
            if (comment.getPermId() != null) {
                setTitle("Edit comment");
            } else {
                setTitle("Add comment");
            }
        }

        getOKAction().putValue(Action.NAME, "Post");


//        fillInCrucibleServers();
    }

    public JComponent getPreferredFocusedComponent() {
        return commentText;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootComponent = new JPanel();
        rootComponent.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootComponent.setMinimumSize(new Dimension(450, 200));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(1, 1, 1, 1), -1, -1));
        rootComponent.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Server:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Repository:");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootComponent.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootComponent;
    }
/*
    private void fillInCrucibleServers() {
        ProductServerConfiguration crucibleConfiguration =
                ConfigurationFactory.getConfiguration().getProductServers(ServerType.CRUCIBLE_SERVER);

        Collection<Server> enabledServers = crucibleConfiguration.transientgetEnabledServers();
        if (enabledServers.isEmpty()) {
            crucibleServersComboBox.setEnabled(false);
            crucibleServersComboBox.addItem("Enable a Crucible server first!");
            getOKAction().setEnabled(false);
        } else {
            for (Server server : enabledServers) {
                crucibleServersComboBox.addItem(new ServerComboBoxItem(server));
            }
        }
    }

    private void fillServerRelatedCombos(final Server server) {
        repoComboBox.removeAllItems();
        getOKAction().setEnabled(false);

        new Thread(new Runnable() {
            public void run() {
                List<Project> projects = new ArrayList<Project>();
                List<Repository> repositories = new ArrayList<Repository>();
                List<User> users = new ArrayList<User>();

                try {
                    projects = crucibleServerFacade.getProjects(server);
                    repositories = crucibleServerFacade.getRepositories(server);
                    users = crucibleServerFacade.getUsers(server);
                } catch (RemoteApiException e) {
                    // nothing can be done here
                } catch (ServerPasswordNotProvidedException e) {
                    // nothing can be done here
                }
                final List<Repository> finalRepositories = repositories;
                EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        updateServerRelatedCombos(server, finalRepositories);
                    }
                });
            }
        }, "atlassian-idea-plugin crucible patch upload combos refresh").start();
    }

    private void updateServerRelatedCombos(
            Server server,
            List<Repository> repositories) {
        repoComboBox.addItem("");
        if (!repositories.isEmpty()) {
            for (Repository repo : repositories) {
                repoComboBox.addItem(new RepositoryComboBoxItem(repo));
            }
            getOKAction().setEnabled(true);
        }
    }
*/

    public JComponent getRootComponent() {
        return rootComponent;
    }

    @Nullable
    protected JComponent createCenterPanel() {
        return getRootComponent();
    }


    protected void doOKAction() {
        comment.setDraft(saveAsDraft);
        comment.setDefectRaised(defectCheckBox.isSelected());
        comment.setMessage(commentText.getText());
        super.doOKAction();
    }

    @Override
    protected Action[] createActions() {
        return new Action[0];
    }

    public Action getDraftAction() {
        return draftAction;
    }

    private Action draftAction = new AbstractAction() {
        {
            putValue(Action.NAME, "Save as Draft");
        }

        public void actionPerformed(ActionEvent e) {
            saveAsDraft = true;
            doOKAction();
        }
    };

    private void createUIComponents() {
    }

    public CommentBean getComment() {
        return comment;
    }

    public void setComment(CommentBean comment) {
        this.comment = comment;
    }
}
